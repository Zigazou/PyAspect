#!/usr/bin/env python3
"""PyAspect allows you to implement Aspect Oriented Programming in Python"""
import sys

def replace_function(orig, new):
    """Replace a function by another"""
    # We need to parse every class in the function globals to find reference to
    # the original function in order to patch it (it could be a method)
    globs = orig.__globals__
    for class_key in [key for key in globs if isinstance(globs[key], type)]:
        try:
            a_class = globs[class_key].__dict__
            for key in [key for key in a_class if a_class[key] == orig]:
                setattr(globs[class_key], key, new)
        except AttributeError:
            continue

    # We need to parse every loaded module to find reference to the
    # original function in order to patch it
    for module_key in sys.modules:
        try:
            module = sys.modules[module_key].__dict__
            for key in [key for key in module if module[key] == orig]:
                module[key] = new
        except AttributeError:
            continue

def apply_advice_to(advice, func):
    """Force a function to use an advice which will wrap it"""
    replace_function(
        func,
        lambda *args, **kwargs: advice.wrapper(func, *args, **kwargs)
    )

class Advice:
    """An advice wraps a function"""
    def __init__(self):
        pass

    def wrapper(self, original, *args, **kwargs):
        """Wraps a call to a function. You should not use or overload this
        method"""
        self.before(*args, **kwargs)
        self.proceed(original, *args, **kwargs)
        self.after(*args, **kwargs)

    def proceed(self, func, *args, **kwargs):
        """Proceed method can be overloaded. It executes the function"""
        try:
            func(*args, **kwargs)
        except Exception as exception:
            self.exception(exception)

    def before(self, *args, **kwargs):
        """Before method can be overloaded. It is executed before Proceed"""
        pass

    def after(self, *args, **kwargs):
        """After method can be overloaded. It is executed after Proceed"""
        pass

    def exception(self, exception):
        """Handles exceptions generated by Proceed method"""
        raise exception

